name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'
      # - main

jobs:
  snyk-security:
    name: Snyk Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Install Snyk CLI
      run: npm install -g snyk

    - name: Authenticate Snyk
      run: snyk auth ${{ secrets.SNYK_API_KEY }}

    - name: Snyk Test - Backend
      working-directory: ./server
      run: snyk test --severity-threshold=high

    - name: Snyk Test - Frontend
      working-directory: ./client
      run: snyk test --severity-threshold=high

    - name: Snyk IaC Test - Kubernetes Manifests
      run: snyk iac test k8s/ --severity-threshold=high

    - name: Snyk Monitor - Backend
      if: github.ref == 'refs/heads/main'
      working-directory: ./server
      run: snyk monitor

    - name: Snyk Monitor - Frontend
      if: github.ref == 'refs/heads/main'
      working-directory: ./client
      run: snyk monitor

  build-and-deploy:
    name: Build & Deploy CampusConnect
    runs-on: ubuntu-latest

    env:
      ACR_NAME: campusconnectacr
      RESOURCE_GROUP: cc-resource-group
      CLUSTER_NAME: CampusConnectAKS
      IMAGE_TAG: ${{ github.sha }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

    - name: Log in to ACR
      run: az acr login --name $ACR_NAME

    - name: Build and Push Backend Image
      run: |
        docker build \
          --build-arg CLIENT_ORIGIN=${{ secrets.CLIENT_ORIGIN }} \
          --build-arg NODE_ENV=production \
        -t $ACR_NAME.azurecr.io/campusconnect-backend:${{ env.IMAGE_TAG }} ./server
        docker push $ACR_NAME.azurecr.io/campusconnect-backend:${{ env.IMAGE_TAG }}

    - name: Build and Push Frontend Image
      run: |
        docker build \
          --build-arg NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }} \
          --build-arg NEXT_PUBLIC_CLIENT_URL=${{ secrets.NEXT_PUBLIC_CLIENT_URL }} \
          --build-arg NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }} \
          --build-arg NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }} \
          --build-arg NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }} \
          --build-arg NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }} \
          --build-arg NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }} \
          --build-arg NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }} \
          --build-arg NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }} \
          --build-arg NEXT_PUBLIC_IMGBB_API_KEY=${{ secrets.NEXT_PUBLIC_IMGBB_API_KEY }} \
          --build-arg NEXT_PUBLIC_TINYMCE_API_KEY=${{ secrets.NEXT_PUBLIC_TINYMCE_API_KEY }} \
          -t $ACR_NAME.azurecr.io/campusconnect-frontend:${{ env.IMAGE_TAG }} ./client
        docker push $ACR_NAME.azurecr.io/campusconnect-frontend:${{ env.IMAGE_TAG }}

    - name: Update Backend Deployment in AKS
      run: |
        kubectl set image deployment/backend backend=$ACR_NAME.azurecr.io/campusconnect-backend:${{ env.IMAGE_TAG }} -n campusconnect

    - name: Update Frontend Deployment in AKS
      run: |
        kubectl set image deployment/frontend frontend=$ACR_NAME.azurecr.io/campusconnect-frontend:${{ env.IMAGE_TAG }} -n campusconnect

    # Wait for Backend Deployment to be ready
    - name: Wait for API to become healthy
      # run: |
      #   for i in {1..10}; do
      #     echo "Attempt $i: Checking API health..."
      #     if curl --fail --silent https://sait.campusconnect.it.com/api/health; then
      #       echo "✅ API is healthy!"
      #       exit 0
      #     fi
      #     echo "⚠️ Waiting for API to become ready..."
      #     sleep 5
      #   done
      #   echo "❌ API did not become healthy in time."
      #   exit 1
      run: |
        for i in {1..20}; do
          echo "Attempt $i: Checking API health..."
          RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" https://sait.campusconnect.it.com/api/health)
          BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
          STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          echo "Status: $STATUS"
          echo "Body: $BODY"
          if [ "$STATUS" -eq 200 ]; then
            echo "✅ API is healthy!"
            exit 0
          fi
          echo "⚠️ Waiting 5s for API to become ready..."
          sleep 5
        done
        echo "❌ API did not become healthy in time."
        exit 1

