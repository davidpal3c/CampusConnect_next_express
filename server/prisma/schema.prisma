generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       String             @id @unique
  email         String             @unique
  password      String?
  first_name    String
  last_name     String
  role          Role
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt
  middle_name   String?
  image_url     String?
  Admin         Admin?
  Alumni        Alumni?
  Articles      Article[]
  Groups        Group[]
  MessagesSent  Message[]
  Student       Student?
  UserEvents    UserEvent[]
  UserGroups    UserGroup[]
  Notifications UserNotification[]

  @@index([email, user_id])
}

model Admin {
  user_id     String  @id @unique
  permissions String?
  User        User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Student {
  user_id       String     @id @unique
  program_id    String?
  department_id String
  status        Status
  intake        String?
  intake_year   Int?
  student_type  StudentType?
  Department    Department @relation(fields: [department_id], references: [department_id])
  Program       Program?   @relation(fields: [program_id], references: [program_id])
  User          User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Alumni {
  user_id           String   @id @unique
  current_position  String?
  company           String?
 
  // Relation
  User              User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  AlumniStudy     AlumniStudy[]
}

model AlumniStudy {
  id              String   @id @unique @default(uuid())
  alumni_id       String
  program_id      String?
  department_id   String
  graduation_year Int?
  
  // Relations
  Alumni          Alumni    @relation(fields: [alumni_id], references: [user_id], onDelete: Cascade)
  Program         Program?  @relation(fields: [program_id], references: [program_id])
  Department      Department @relation(fields: [department_id], references: [department_id])

  @@unique([alumni_id, program_id, department_id, graduation_year]) 
}

 
model Program {
  program_id    String     @id
  name          String
  department_id String
  Department    Department @relation(fields: [department_id], references: [department_id])
  Students      Student[]
  AlumniStudies AlumniStudy[]
}

model Department {
  department_id String    @id @unique
  name          String
  contact_email String
  contact_phone String
  Programs      Program[]
  Students      Student[]
  AlumniStudies AlumniStudy[]
}

model Article {
  article_id    String            @id @unique @default(uuid())
  title         String
  datePublished DateTime?         @default(now())
  content       String
  imageUrl      String?
  audience      Json?
  created_at    DateTime          @default(now())
  updated_at    DateTime          @updatedAt
  status        ArticleStatus
  author_id     String
  author        String?
  type_id       String
  tags          String?
  User          User              @relation(fields: [author_id], references: [user_id], onDelete: SetNull)
  type          ArticleType       @relation(fields: [type_id], references: [type_id])
  Categories    ArticleCategory[]
}

model ArticleType {
  type_id    String    @id @unique @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  isDefault  Boolean?  @default(false)
  articles   Article[]
}

model ArticleCategory {
  id          String   @id @unique @default(uuid())
  article_id  String
  category_id String
  Article     Article  @relation(fields: [article_id], references: [article_id])
  Category    Category @relation(fields: [category_id], references: [category_id])
}

model Event {
  event_id          String   @id @unique @default(uuid())
  name              String
  date              DateTime
  location          String
  audience          Json
  host              String? // descriptive (eg. department name, program name,etc)
  contact           String
  capacity          Int
  current_attendees Int      @default(0)
  form_id           String?  @unique

  //Relation
  Categories        EventCategory[]
  UserEvents        UserEvent[]
  form              Form?    @relation("EventForm", fields: [form_id], references: [id])

  //User            User  @relation(fields: [owner], references: [user_id])
  //@@index([owner])

  @@index([host])
}

//Made changes to this
model Form {
  id          String   @id @default(uuid())
  title       String
  fields      Json     // Stores form structure (e.g., [{ type: "text", title: "Name" }])
  isDraft     Boolean @default(true)
  createdAt   DateTime @default(now())
  submissions FormSubmission[]

  //inverse relation
  event       Event?   @relation("EventForm")
}

//User Side for them to see the form... Hopefully
model FormSubmission {
  id        String   @id @default(uuid())
  form      Form     @relation(fields: [formId], references: [id])
  formId    String
  data      Json     // Stores user responses (e.g., { q1: "John" })
  createdAt DateTime @default(now())
}

model EventCategory {
  id          String   @id @unique @default(uuid())
  event_id    String
  category_id String
  Category    Category @relation(fields: [category_id], references: [category_id])
  Event       Event    @relation(fields: [event_id], references: [event_id])
}

model Category {
  category_id String            @id @unique @default(uuid())
  name        String
  Articles    ArticleCategory[]
  Events      EventCategory[]
}

model Group {
  group_id      String      @id @unique @default(uuid())
  name          String
  owner_id      String
  audience      Json
  allowed_users Json?
  owner         User        @relation(fields: [owner_id], references: [user_id])
  Messages      Message[]
  UserGroups    UserGroup[]
}

model Message {
  message_id String   @id @unique @default(uuid())
  content    String
  timestamp  DateTime @default(now())
  sender_id  String
  group_id   String
  Group      Group    @relation(fields: [group_id], references: [group_id], onDelete: Cascade)
  Sender     User     @relation(fields: [sender_id], references: [user_id], onDelete: Cascade)
}

model UserEvent {
  id         String   @id @unique @default(uuid())
  user_id    String
  event_id   String
  rsvp       Boolean  @default(false)
  user_email String
  owned      Boolean? @default(false)
  Event      Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  User       User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_email])
}

model UserGroup {
  id       String @id @unique @default(uuid())
  user_id  String
  group_id String
  Group    Group  @relation(fields: [group_id], references: [group_id], onDelete: Cascade)
  User     User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Notification {
  notification_id   String             @id @unique @default(uuid())
  description       String
  audience          Json
  created_at        DateTime           @default(now())
  type              NotificationType
  UserNotifications UserNotification[]
}

model UserNotification {
  id              String       @id @unique @default(uuid())
  user_id         String
  notification_id String
  accessed        Boolean      @default(false)
  Notification    Notification @relation(fields: [notification_id], references: [notification_id], onDelete: Cascade)
  User            User         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

enum Role {
  Admin
  Student
  Alumni
}

enum Status {
  Active
  Inactive
  Prospective
}

enum StudentType {
  Domestic
  International
}

enum NotificationType {
  Article
  Event
  Group
}

enum ArticleStatus {
  Draft
  Published
}

